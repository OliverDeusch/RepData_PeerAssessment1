submit()
submit()
skip()
submit()
submit()
submit()
dir()
submit()
source("evaluate.R"")
source("evaluate.R")
source("evaluate.R")
source("evaluate")
submit()
source('/private/var/folders/95/b3x27d412rj03lxm092fy5300000gn/T/RtmpqUYFSW/evaluate.R')
submit()
source('/private/var/folders/95/b3x27d412rj03lxm092fy5300000gn/T/RtmpqUYFSW/evaluate.R')
source('/private/var/folders/95/b3x27d412rj03lxm092fy5300000gn/T/RtmpqUYFSW/evaluate.R')
submit()
submit()
bye()
swirl()
submit()
submit()
evaluate(sum, 1:4)
evaluate
source('/var/folders/95/b3x27d412rj03lxm092fy5300000gn/T//RtmpqUYFSW/evaluate.R')
evaluate
evaluate(sum, 1:4)
source('/var/folders/95/b3x27d412rj03lxm092fy5300000gn/T//RtmpqUYFSW/evaluate.R')
source('/var/folders/95/b3x27d412rj03lxm092fy5300000gn/T//RtmpqUYFSW/evaluate.R')
evaluate(sum, 1:4)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x)|{x[1]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Das ist der Kot!")
submit()
mad_libs(toilet, smelly, hat())
mad_libs(toilet, smelly, hat
)
mad_libs(toilet, smelly, hat)
mad_libs("toilet", "smelly", "hat")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
install.packages("RMySQL")
dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
librarq(RMySQL)
library(RMySQL)
dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
dbGetQuery(ucscDb,"show databases;");  dbDisconnect(uscsDb);
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");  dbDisconnect(uscsDb);
result <- dbGetQuery(ucscDb,"show databases;");  dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select(count*) from affyU133Plus2")
dbGetQuery(hg19, "select(count(*) from affyU133Plus2")
dbGetQuery(hg19, "select(count(*) from affyU133Plus2)")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
affyMisSmall <- fetch(query,n=10); dbClearResult(query); # Important to clear querys
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
dim(affyMisSmall)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");  dbDisconnect(ucscDb);
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query); # Important to clear querys
dim(affyMisSmall)
dbDisconnect(h19)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rdh5")
created = h5createFile("example.h5")
source("http://bioconductor.org/biocLite.R")
biocLite("rdh5")
library(rhd5)
source("http://bioconductor.org/biocLite.R")
biocLite("rdh5")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("rdh5", type = "source"))
biocLite("rdh5", type = "source")
updateR()
library(installr)
con = url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ")
htmlCode = readLines(con)
close(con)
htmlcode
con = url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ")
htmlCode = readLines(con)
close(con)
htmlcode
htmlCode
library(XML)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ")
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id="col-citedby"]", xmlValue)
xpathSApply(html, "//td[@id=\"col-citedby\"]", xmlValue)
xpathSApply(html, "//td[@id=\\"col-citedby\\"]", xmlValue)
xpathSApply(html, "//td[@id=col-citedby]", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id=\'col-citedby\']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml= htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
myapp = oauth_app("twitter", key="HtI9wTjFROdTWxMfoiHyaquDV", secret="kIQ05BZTXjt9noaAM5qCOeAjaGdTaJzYnXg5TEnIkIWtoBe8pI")
sig = sign_oauth1.0(myapp, token = "1722275563-IVWZMkQkMYGv8kopteImi0zYGXGW3Kv9OqPUjlC", token_secret = "UZ82QZTelAUzo9NB1gJo7PnMUFNoVTqVsyradpMDPfGc1")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
install.packages("base64en")
source("http://bioconductor.org/biocLite.R")
biocLite("base64en")
update()
updateR
updateR()
install.packages("installr")
setwd("Coursera/Reproducible_Research/")
setwd("Course_project_1/")
dir()
dir()
setwd("..")
dir()
setwd("Course_project_1/")
data <- read.csv("activity.csv")
by_date <- aggregate(steps ~ date, data, sum)
mno <- round(mean(by_date$steps), digits = 2)
mdo <- round(median(by_date$steps), digits = 2)
toto <- round(sum(data$steps, na.rm = TRUE), digits = 2)
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mno)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdo)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toto)), adj = c(0,0))
by_interval <- aggregate(steps ~ interval, data, mean)
with(by_interval, plot(steps ~ interval, type = "l",
main = "Average Daily Activity Pattern",
xlab = "Time of Day (minutes)\n(24 hour day divided into 288 intervals of 5 minutes each)",
ylab = "Mean Number of Steps"))
with(by_interval, abline(v = by_interval$interval[which.max(by_interval$steps)], col = "red"))
library(lubridate)
mx <- round(max(by_interval$steps), digits = 2) # The maximum average number of steps
mx
which.max(by_interval$steps) # The index of the interval with the maximum
by_interval$interval[which.max(by_interval$steps)] # The interval with the maximum
seconds_to_period(by_interval$interval[which.max(by_interval$steps)]*60) # The interval converted to "normal" time
legend("topright", legend = paste("Maximum number of steps:", mx), lty = 1, col = "red")
```
data_imputed <- data
sum(is.na(data_imputed$steps)) # Calculate number of missing values
NA_index <- is.na(data_imputed$steps) # Find indices of NAs
for (i in which(NA_index)) { # Replace NAs with interval mean
data_imputed$steps[i] <- by_interval[by_interval$interval == data_imputed$interval[i], "steps"]
}
sum(is.na(data_imputed$steps)) # Calculate number of missing values after replacement
par(mfrow = c(2, 1))
# Plot original data as previously
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day\nOriginal Data", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mno)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdo)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toto)), adj = c(0,0))
# Plot imputed data
by_date_imputed <- aggregate(steps ~ date, data_imputed, sum)
mni <- round(mean(by_date_imputed$steps), digits = 2)
mdi <- round(median(by_date_imputed$steps), digits = 2)
toti <- round(sum(data_imputed$steps), digits = 2)
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day\nImputed data", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mni)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdi)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toti)), adj = c(0,0))
t <- ymd(data_imputed$date)
weekdays(t)
as.factor(weekdays(t))
a$day <- weekdays(t)
a <- data.frame()
a$day <- weekdays(t)
b <- logical(length = length(a))
a <- weekdays(t)
b <- logical(length = length(a))
library(dplyr)
filter(weekdays, weekdays %in% c("Saturday", "Sunday"))
s <- data_imputed
s$wd <- weekdays(t)
View(s)
View(s)
View(s)
s <- data_imputed
s$test <- filter(s, weekdays %in% c("Saturday", "Sunday"))
data <- read.csv("activity.csv")
data_imputed <- data
sum(is.na(data_imputed$steps)) # Calculate number of missing values
NA_index <- is.na(data_imputed$steps) # Find indices of NAs
for (i in which(NA_index)) { # Replace NAs with interval mean
data_imputed$steps[i] <- by_interval[by_interval$interval == data_imputed$interval[i], "steps"]
}
sum(is.na(data_imputed$steps)) # Calculate number of missing values after replacement
sum(is.na(data_imputed$steps)) # Calculate number of missing values after replacement
NA_index <- is.na(data_imputed$steps) # Find indices of NAs
for (i in which(NA_index)) { # Replace NAs with interval mean
data_imputed$steps[i] <- by_interval[by_interval$interval == data_imputed$interval[i], "steps"]
}
sum(is.na(data_imputed$steps)) # Calculate number of missing values after replacement
data <- read.csv("activity.csv")
by_date <- aggregate(steps ~ date, data, sum)
mno <- round(mean(by_date$steps), digits = 2)
mdo <- round(median(by_date$steps), digits = 2)
toto <- round(sum(data$steps, na.rm = TRUE), digits = 2)
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mno)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdo)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toto)), adj = c(0,0))
by_interval <- aggregate(steps ~ interval, data, mean)
with(by_interval, plot(steps ~ interval, type = "l",
main = "Average Daily Activity Pattern",
xlab = "Time of Day (minutes)\n(24 hour day divided into 288 intervals of 5 minutes each)",
ylab = "Mean Number of Steps"))
with(by_interval, abline(v = by_interval$interval[which.max(by_interval$steps)], col = "red"))
library(lubridate)
mx <- round(max(by_interval$steps), digits = 2) # The maximum average number of steps
mx
which.max(by_interval$steps) # The index of the interval with the maximum
by_interval$interval[which.max(by_interval$steps)] # The interval with the maximum
seconds_to_period(by_interval$interval[which.max(by_interval$steps)]*60) # The interval converted to "normal" time
legend("topright", legend = paste("Maximum number of steps:", mx), lty = 1, col = "red")
data_imputed <- data
sum(is.na(data_imputed$steps)) # Calculate number of missing values
NA_index <- is.na(data_imputed$steps) # Find indices of NAs
for (i in which(NA_index)) { # Replace NAs with interval mean
data_imputed$steps[i] <- by_interval[by_interval$interval == data_imputed$interval[i], "steps"]
}
sum(is.na(data_imputed$steps)) # Calculate number of missing values after replacement
par(mfrow = c(2, 1))
# Plot original data as previously
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day\nOriginal Data", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mno)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdo)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toto)), adj = c(0,0))
# Plot imputed data
by_date_imputed <- aggregate(steps ~ date, data_imputed, sum)
mni <- round(mean(by_date_imputed$steps), digits = 2)
mdi <- round(median(by_date_imputed$steps), digits = 2)
toti <- round(sum(data_imputed$steps), digits = 2)
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day\nImputed data", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mni)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdi)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toti)), adj = c(0,0))
data_imputed$date <- ymd(data_imputed$date)
s <- data_imputed
s$weekday <- weekdays(s$date)
a <- s$weekday %in% c("Saturday", "Sunday")
View(s)
View(s)
s <- data_imputed
#as.factor(weekdays(t))
#a <- data.frame()
s$day <- weekdays(s$date)
#b <- logical(length = length(a))
#library(dplyr)
#a <- filter(s, weekdays %in% c("Saturday", "Sunday"))
s$is.weekday <- s$day %in% c("Saturday", "Sunday")
View(s)
View(s)
sum(s$is.weekday)
s <- data_imputed
#as.factor(weekdays(t))
#a <- data.frame()
s$day <- weekdays(s$date)
#b <- logical(length = length(a))
#library(dplyr)
#a <- filter(s, weekdays %in% c("Saturday", "Sunday"))
s$is.weekend <- s$day %in% c("Saturday", "Sunday")
sum(s$is.weekday)
sum(s$is.weekend)
data_imputed$date <- ymd(data_imputed$date)
data_imputed$day <- weekdays(data_imputed$date)
#b <- logical(length = length(a))
#library(dplyr)
#a <- filter(s, weekdays %in% c("Saturday", "Sunday"))
data_imputed$is.weekend <- data_imputed$day %in% c("Saturday", "Sunday")
View(data_imputed)
for (i in which(data_imputed$is.weekend)) {
data_imputed$wd <- "weekend"
}
View(data_imputed)
data_imputed$wd <- "bla"
for (i in which(data_imputed$is.weekend)) {
data_imputed$wd[i] <- "weekend"
}
data_imputed$wd <- "weekday"
for (i in which(data_imputed$is.weekend)) {
data_imputed$wd[i] <- "weekend"
}
data_imputed$wd <- as.factor(data_imputed$wd)
data_imputed$wd <- "weekday"
for (i in which(data_imputed$day %in% c("Saturday", "Sunday"))) {
data_imputed$wd[i] <- "weekend"
}
data_imputed$wd <- as.factor(data_imputed$wd)
summary(data_imputed$wd)
for (i in which(data_imputed$day %in% c("Saturday", "Sunday"))) {
data <- read.csv("activity.csv")
by_date <- aggregate(steps ~ date, data, sum)
mno <- round(mean(by_date$steps), digits = 2)
mdo <- round(median(by_date$steps), digits = 2)
toto <- round(sum(data$steps, na.rm = TRUE), digits = 2)
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mno)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdo)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toto)), adj = c(0,0))
by_interval <- aggregate(steps ~ interval, data, mean)
with(by_interval, plot(steps ~ interval, type = "l",
main = "Average Daily Activity Pattern",
xlab = "Time of Day (minutes)\n(24 hour day divided into 288 intervals of 5 minutes each)",
ylab = "Mean Number of Steps"))
with(by_interval, abline(v = by_interval$interval[which.max(by_interval$steps)], col = "red"))
mx <- round(max(by_interval$steps), digits = 2) # The maximum average number of steps
mx
which.max(by_interval$steps) # The index of the interval with the maximum
by_interval$interval[which.max(by_interval$steps)] # The interval with the maximum
library(lubridate)
seconds_to_period(by_interval$interval[which.max(by_interval$steps)]*60) # The interval converted to "normal" time
legend("topright", legend = paste("Maximum number of steps:", mx), lty = 1, col = "red")
data_imputed <- data
sum(is.na(data_imputed$steps)) # Calculate number of missing values
NA_index <- is.na(data_imputed$steps) # Find indices of NAs
for (i in which(NA_index)) { # Replace NAs with interval mean
data_imputed$steps[i] <- by_interval[by_interval$interval == data_imputed$interval[i], "steps"]
}
sum(is.na(data_imputed$steps)) # Calculate number of missing values after replacement
par(mfrow = c(2, 1))
# Plot original data as previously
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day\nOriginal Data", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mno)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdo)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toto)), adj = c(0,0))
# Plot imputed data
by_date_imputed <- aggregate(steps ~ date, data_imputed, sum)
mni <- round(mean(by_date_imputed$steps), digits = 2)
mdi <- round(median(by_date_imputed$steps), digits = 2)
toti <- round(sum(data_imputed$steps), digits = 2)
hist(by_date$steps, breaks = 10, main = "Number of Steps per Day\nImputed data", xlab = "Steps")
text(15000, 15, labels = paste("Mean steps:", as.character(mni)), adj = c(0,0))
text(15000, 13.5, labels = paste("Median steps:", as.character(mdi)), adj = c(0,0))
text(15000, 12, labels = paste("Total steps:", as.character(toti)), adj = c(0,0))
data_imputed$date <- ymd(data_imputed$date)
data_imputed$day <- weekdays(data_imputed$date)
#b <- logical(length = length(a))
#library(dplyr)
#a <- filter(s, weekdays %in% c("Saturday", "Sunday"))
#data_imputed$is.weekend <- data_imputed$day %in% c("Saturday", "Sunday")
data_imputed$daytype <- "weekday"
#for (i in which(data_imputed$is.weekend)) {
for (i in which(data_imputed$day %in% c("Saturday", "Sunday"))) {
data_imputed$daytype[i] <- "weekend"
}
data_imputed$daytype <- as.factor(data_imputed$daytype)
View(data_imputed)
wd <- data_imputed[data_imputed$daytype == "weekday" , ]
we <- data_imputed[data_imputed$daytype == "weekend" , ]
wd$daytype <- as.factor(wd$daytype)
we$daytype <- as.factor(we$daytype)
?aggregate
test <- aggregate(steps ~ interval + daytype, data_imputed, mean)
test
#xyplot(steps ~ interval | daytype, data = data_imputed, layout = c(2,1))
xyplot(steps ~ interval | daytype, data = data_imputed, layout = c(2,1))
library(lattice)
xyplot(steps ~ interval | daytype, data = data_imputed, layout = c(2,1))
xyplot(steps ~ interval | daytype, data = data_imputed, layout = c(1,2))
xyplot(steps ~ interval | daytype, data = data_imputed, layout = c(1,2), type = "l")
xyplot(steps ~ interval, data = data_imputed, layout = c(1,2), type = "l")
xyplot(steps ~ interval | daytype, data = by_int_and_daytype, layout = c(1,2), type = "l")
by_int_and_daytype <- aggregate(steps ~ interval + daytype, data_imputed, mean)
xyplot(steps ~ interval | daytype, data = by_int_and_daytype, layout = c(1,2), type = "l")
